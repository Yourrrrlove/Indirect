<UserControl
    x:Class="Indirect.Controls.ThreadDetailsView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:controls1="using:Indirect.Controls"
    xmlns:converters="using:Indirect.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="using:Indirect"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    xmlns:ui="using:Microsoft.Toolkit.Uwp.UI"
    xmlns:user="using:InstagramAPI.Classes.User"
    xmlns:wrappers="using:Indirect.Entities.Wrappers"
    d:DesignHeight="300"
    d:DesignWidth="400"
    KeyDown="ThreadDetailsView_OnKeyDown"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <converters:EqualityVisibilityConverter x:Key="VisibleWhenZeroConverter" />
            <converters:BooleanVisibilityConverter x:Key="BooleanVisibilityConverter" />
            <converters:BooleanVisibilityConverter x:Key="InvertBooleanVisibilityConverter" Invert="True" />
            <converters:NullVisibilityConverter x:Key="NullVisibilityConverter" />
            <converters:NullVisibilityConverter x:Key="InvertNullVisibilityConverter" Invert="True" />

            <muxc:TeachingTip
                x:Name="SendButtonTeachingTip"
                Title="Customize your quick reply"
                Subtitle="Right click the send button to choose an emoji for your quick reply."
                Target="{x:Bind ReactButton}">
                <muxc:TeachingTip.IconSource>
                    <muxc:SymbolIconSource Symbol="Emoji" />
                </muxc:TeachingTip.IconSource>
            </muxc:TeachingTip>

            <muxc:TeachingTip
                x:Name="SendEmojiTeachingTip"
                Title="Emoji button has been removed"
                Subtitle="To insert an emoji during text entry, press Win + . (period). The emoji keyboard will appear."
                Target="{x:Bind MessageTextBox}" />
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid
        x:Name="RootGrid"
        AllowDrop="True"
        DragOver="OnDragOver"
        Drop="OnDrop">
        <Grid.RowDefinitions>
            <RowDefinition Height="32" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <FlyoutBase.AttachedFlyout>
            <Flyout x:Name="FilePickerFlyout" Closing="FilePickerFlyout_OnClosing">
                <StackPanel x:Name="SendConfirmation" MaxWidth="300">
                    <controls1:PhotoVideoControl
                        x:Name="FilePickerPreview"
                        Height="160"
                        Margin="0,0,0,12"
                        HorizontalAlignment="Center"
                        CornerRadius="4" />

                    <TextBlock
                        Margin="0,0,0,12"
                        HorizontalAlignment="Center"
                        Style="{ThemeResource FluentBaseTextStyle}"
                        Text="Do you want to send this photo?" />

                    <Button
                        HorizontalAlignment="Center"
                        Click="SendFileButton_OnClick"
                        Content="Send"
                        TabIndex="0" />
                </StackPanel>
            </Flyout>
        </FlyoutBase.AttachedFlyout>

        <Grid
            x:Name="ContentGrid"
            Grid.Row="1"
            Background="{ThemeResource MainBackground}"
            BorderBrush="{StaticResource FlyoutBorderThemeBrush}"
            BorderThickness="1,1,0,0"
            CornerRadius="8,0,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Border
                Grid.Row="0"
                Background="{ThemeResource AcrylicInAppFillColorDefaultBrush}"
                BorderBrush="{StaticResource FlyoutBorderThemeBrush}"
                BorderThickness="0,0,0,1"
                Canvas.ZIndex="1" />

            <CommandBar
                Grid.Row="0"
                VerticalAlignment="Bottom"
                Background="Transparent"
                Canvas.ZIndex="2"
                DefaultLabelPosition="Right"
                IsDynamicOverflowEnabled="False"
                OverflowButtonVisibility="Collapsed"
                XYFocusKeyboardNavigation="Enabled">

                <FlyoutBase.AttachedFlyout>
                    <Flyout x:Name="UserListFlyout" Placement="BottomEdgeAlignedLeft">
                        <ListView
                            MaxHeight="260"
                            IsItemClickEnabled="True"
                            ItemClick="UserList_OnItemClick"
                            ItemsSource="{x:Bind Thread.Users, Mode=OneWay}"
                            SelectionMode="None">

                            <FlyoutBase.AttachedFlyout>
                                <Flyout x:Name="UserInfoFlyout">
                                    <controls1:UserInfoView x:Name="UserInfoView" />
                                </Flyout>
                            </FlyoutBase.AttachedFlyout>

                            <ListView.ItemTemplate>
                                <DataTemplate x:DataType="user:BaseUser">
                                    <StackPanel Orientation="Horizontal">
                                        <controls:ImageEx
                                            Width="28"
                                            Height="28"
                                            Margin="0,0,10,0"
                                            CornerRadius="99"
                                            Source="{x:Bind ProfilePictureUrl}" />
                                        <TextBlock VerticalAlignment="Center" Text="{x:Bind Username}" />
                                    </StackPanel>
                                </DataTemplate>
                            </ListView.ItemTemplate>

                        </ListView>
                    </Flyout>
                </FlyoutBase.AttachedFlyout>

                <AppBarButton
                    x:Name="ViewProfileAppBarButton"
                    Click="ShowUsersInfoFlyout"
                    Icon="Contact2"
                    Label="View profile" />

                <AppBarButton
                    x:Name="NewWindowButton"
                    Width="48"
                    Click="OpenInNewWindow_OnClick"
                    Label="Open thread in a new window"
                    LabelPosition="Collapsed"
                    ToolTipService.ToolTip="Open thread in a new window">
                    <AppBarButton.Icon>
                        <FontIcon
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource SymbolThemeFontFamily}"
                            Glyph="&#xE8A7;" />
                    </AppBarButton.Icon>
                </AppBarButton>

                <AppBarButton
                    x:Name="CompactOverlayButton"
                    Width="48"
                    Click="CompactOverlayButton_OnClick"
                    Label="Enter Picture-in-Picture mode"
                    LabelPosition="Collapsed"
                    ToolTipService.ToolTip="Enter Picture-in-Picture mode"
                    Visibility="{x:Bind IsNewWindow, Converter={StaticResource BooleanVisibilityConverter}, Mode=OneWay}">
                    <AppBarButton.Icon>
                        <FontIcon
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource SymbolThemeFontFamily}"
                            Glyph="&#xEE49;" />
                    </AppBarButton.Icon>
                </AppBarButton>

                <CommandBar.Content>
                    <Grid
                        x:Name="ThreadInfoHeader"
                        Margin="8,6,0,0"
                        Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <controls1:ProfilePictureWithStory
                            x:Name="ProfilePictureView"
                            Grid.Column="0"
                            Width="32"
                            Height="32"
                            Margin="4,0,12,0"
                            VerticalAlignment="Center"
                            Source="{x:Bind Thread.Users, Mode=OneWay}" />

                        <StackPanel
                            Grid.Column="1"
                            VerticalAlignment="Center"
                            Orientation="Vertical">
                            <StackPanel.Transitions>
                                <RepositionThemeTransition />
                            </StackPanel.Transitions>
                            <TextBlock Style="{ThemeResource FluentBaseTextStyle}" Text="{x:Bind Thread.Source.Title, Mode=OneWay}" />
                            <TextBlock
                                x:Name="LastActiveText"
                                Margin="0,-1,0,0"
                                Opacity="0.6"
                                Style="{ThemeResource FluentCaptionTextStyle}"
                                Text="Active now" />
                        </StackPanel>
                    </Grid>
                </CommandBar.Content>
            </CommandBar>

            <controls1:ChatListView
                x:Name="ItemsHolder"
                Grid.Row="0"
                Grid.RowSpan="2"
                ui:ScrollViewerExtensions.VerticalScrollBarMargin="0,50,0,0"
                ContainerContentChanging="ItemsHolder_ContainerContentChanging"
                ContextRequested="ItemsHolder_OnContextRequested"
                DataFetchSize="1"
                IncrementalLoadingThreshold="1"
                ItemContainerTransitions="{x:Null}"
                ItemsSource="{x:Bind Thread.ObservableItems, Mode=OneWay}"
                PreviewKeyDown="ItemsHolder_OnPreviewKeyDown"
                SelectionMode="None"
                ShowsScrollingPlaceholders="False"
                XYFocusKeyboardNavigation="Enabled">

                <ListView.Header>
                    <!--  Title bar height + command bar height = 32 + 48 = 80  -->
                    <Frame Height="80" />
                </ListView.Header>

                <ListView.Footer>
                    <StackPanel HorizontalAlignment="Stretch">
                        <TextBlock
                            x:Name="TypingIndicator"
                            Margin="14,6,14,10"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Bottom"
                            Foreground="{StaticResource SystemControlForegroundBaseMediumBrush}"
                            Style="{ThemeResource FluentCaptionTextStyle}"
                            Text="Typing..."
                            Visibility="{x:Bind Thread.IsSomeoneTyping, Mode=OneWay, Converter={StaticResource BooleanVisibilityConverter}}" />

                        <TextBlock
                            Margin="0,0,0,16"
                            HorizontalAlignment="Center"
                            Foreground="{StaticResource SystemControlForegroundBaseMediumBrush}"
                            Text="Send your first message to start chatting"
                            Visibility="{x:Bind Thread.ObservableItems.Count, Converter={StaticResource VisibleWhenZeroConverter}, Mode=OneWay}" />

                        <!--<Grid x:Name="PendingControlGrid" HorizontalAlignment="Stretch" Background="{ThemeResource AcrylicInAppFillColorDefaultBrush}"
                              Visibility="{x:Bind Thread.Pending, Converter={StaticResource BooleanVisibilityConverter}, Mode=OneWay}">
                            <Grid.Resources>
                                <ResourceDictionary>
                                    <Style x:Key="PendingButtonStyle" TargetType="Button">
                                        <Setter Property="Margin" Value="2"/>
                                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                    </Style>
                                </ResourceDictionary>
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                                <ColumnDefinition Width="1*"/>
                            </Grid.ColumnDefinitions>

                            <RichTextBlock Grid.Row="0" Grid.ColumnSpan="3" TextAlignment="Center" HorizontalAlignment="Stretch" Margin="10" MaxWidth="350">
                                <Paragraph>
                                    <Run Text="{x:Bind Thread.Inviter.Username, Mode=OneWay}" FontWeight="Bold"/> wants to send you a message.
                                </Paragraph>
                                <Paragraph/>
                                <Paragraph FontSize="12" Foreground="{StaticResource SystemControlForegroundBaseMediumBrush}">
                                    Do you want to let <Run Text="{x:Bind Thread.Inviter.Username, Mode=OneWay}"/> send you messages from now on? They'll only know you've seen the request if you choose Accept.
                                </Paragraph>
                            </RichTextBlock>
                            <Button Grid.Row="1" Grid.Column="0" Content="Block" IsEnabled="False" ToolTipService.ToolTip="Not yet implemented" Style="{StaticResource PendingButtonStyle}"/>
                            <Button Grid.Row="1" Grid.Column="1" Content="Delete" IsEnabled="False" ToolTipService.ToolTip="Not yet implemented" Style="{StaticResource PendingButtonStyle}"/>
                            <Button Grid.Row="1" Grid.Column="2" Content="Accept" IsEnabled="False" Style="{StaticResource PendingButtonStyle}"/>
                        </Grid>-->
                    </StackPanel>
                </ListView.Footer>

                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <ItemsStackPanel VerticalAlignment="Bottom" ItemsUpdatingScrollMode="KeepLastItemInView" />
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>

                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="MinHeight" Value="0" />
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    </Style>
                </ListView.ItemContainerStyle>

                <ListView.ItemTemplate>
                    <DataTemplate x:DataType="wrappers:DirectItemWrapper">
                        <controls1:ThreadItemControl Item="{x:Bind}" />
                    </DataTemplate>
                </ListView.ItemTemplate>
            </controls1:ChatListView>

            <Grid
                x:Name="MessageInputGrid"
                Grid.Row="2"
                Margin="0,2,0,2"
                HorizontalAlignment="Stretch"
                XYFocusKeyboardNavigation="Enabled">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="64" />
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <muxc:ProgressBar
                    x:Name="UploadProgress"
                    Grid.Row="0"
                    Grid.Column="0"
                    Grid.ColumnSpan="5"
                    Margin="2"
                    HorizontalAlignment="Stretch"
                    AutomationProperties.Name="Upload progress"
                    IsIndeterminate="True"
                    Visibility="Collapsed" />

                <Grid
                    Grid.Row="1"
                    Grid.Column="2"
                    Margin="4"
                    Padding="10,6,6,6"
                    Background="{ThemeResource AcrylicInAppFillColorDefaultBrush}"
                    CornerRadius="4"
                    Visibility="{x:Bind Thread.ReplyingItem, Converter={StaticResource NullVisibilityConverter}, Mode=OneWay}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>

                    <TextBlock
                        Grid.Row="0"
                        Grid.Column="0"
                        Margin="0,0,3,0"
                        FontSize="12"
                        Opacity="0.5">
                        <Run Text="Replying to " /><Run Text="{x:Bind Thread.ReplyingItem.Sender.Username, Mode=OneWay}" />
                    </TextBlock>

                    <TextBlock
                        Grid.Row="1"
                        Grid.Column="0"
                        Margin="0,0,3,0"
                        MaxLines="1"
                        Text="{x:Bind Thread.ReplyingItem.Description, Mode=OneWay}" />

                    <controls:ImageEx
                        Grid.Row="0"
                        Grid.RowSpan="2"
                        Grid.Column="1"
                        Width="32"
                        Height="32"
                        Margin="3,2"
                        VerticalAlignment="Center"
                        Source="{x:Bind Thread.ReplyingItem.PreviewImageUri, Mode=OneWay}"
                        Stretch="UniformToFill"
                        Visibility="{x:Bind Thread.ReplyingItem.PreviewImageUri, Converter={StaticResource NullVisibilityConverter}, Mode=OneWay}" />

                    <Button
                        Grid.Row="0"
                        Grid.RowSpan="2"
                        Grid.Column="2"
                        Margin="3,0,0,0"
                        VerticalAlignment="Center"
                        Background="Transparent"
                        Click="ClearReplyButton_OnClick">
                        <SymbolIcon Symbol="Cancel" />
                    </Button>
                </Grid>

                <Button
                    x:Name="SendFilesButton"
                    Grid.Row="3"
                    Grid.Column="0"
                    Margin="8,0,0,0"
                    AutomationProperties.Name="Send a photo"
                    Click="SendFilesButton_OnClick"
                    ToolTipService.ToolTip="Send a photo">
                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xEB9F;" />
                </Button>

                <Button
                    x:Name="SendGifButton"
                    Grid.Row="3"
                    Grid.Column="1"
                    Margin="2,0,0,0"
                    AutomationProperties.Name="Send a sticker or a GIF"
                    ToolTipService.ToolTip="Send a sticker or a GIF">
                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xF4A9;" />
                    <Button.Flyout>
                        <Flyout x:Name="GifPickerFlyout">
                            <controls1:AnimatedImagePicker x:Name="GifPicker" Thread="{x:Bind Thread, Mode=OneWay}" />
                        </Flyout>
                    </Button.Flyout>
                </Button>

                <TextBox
                    x:Name="MessageTextBox"
                    Grid.Row="2"
                    Grid.RowSpan="2"
                    Grid.Column="2"
                    Margin="4,0"
                    VerticalAlignment="Stretch"
                    AcceptsReturn="True"
                    GotFocus="{x:Bind Thread.OnUserInteraction}"
                    KeyboardAcceleratorPlacementMode="Hidden"
                    MaxLength="2200"
                    PlaceholderText="Type a message"
                    TabIndex="0"
                    Text="{x:Bind Thread.DraftMessage, Mode=TwoWay}"
                    TextChanged="MessageTextBox_OnTextChanged"
                    TextWrapping="Wrap">
                    <TextBox.KeyboardAccelerators>
                        <KeyboardAccelerator
                            Key="Enter"
                            Invoked="MessageTextBox_OnEnterPressed"
                            Modifiers="None" />
                        <KeyboardAccelerator
                            Key="V"
                            Invoked="MessageTextBox_OnCtrlV"
                            Modifiers="Control" />
                    </TextBox.KeyboardAccelerators>
                </TextBox>

                <Button
                    x:Name="SendVoiceButton"
                    Grid.Row="3"
                    Grid.Column="3"
                    Margin="0,0,2,0"
                    AutomationProperties.Name="Send a voice clip"
                    Click="AddAudioButton_OnClick"
                    ToolTipService.ToolTip="Send a voice clip">
                    <SymbolIcon Symbol="Microphone" />
                </Button>

                <Button
                    x:Name="SendButton"
                    Grid.Row="3"
                    Grid.Column="4"
                    Margin="0,0,8,0"
                    HorizontalAlignment="Stretch"
                    AutomationProperties.Name="Send message"
                    Click="SendButton_Click"
                    ContextRequested="SendButton_OnContextRequested"
                    ToolTipService.ToolTip="Send message"
                    Visibility="{x:Bind MessageTextBox.Text, Mode=OneWay, Converter={StaticResource NullVisibilityConverter}}">
                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xE724;" />
                </Button>

                <Button
                    x:Name="ReactButton"
                    Grid.Row="3"
                    Grid.Column="4"
                    Margin="0,0,8,0"
                    HorizontalAlignment="Stretch"
                    AutomationProperties.Name="React"
                    Click="SendButton_Click"
                    ContextRequested="SendButton_OnContextRequested"
                    ToolTipService.ToolTip="Send a reaction"
                    Visibility="{x:Bind MessageTextBox.Text, Mode=OneWay, Converter={StaticResource InvertNullVisibilityConverter}}">
                    <FontIcon
                        Margin="0,-4,0,-3"
                        FontFamily="{StaticResource ContentControlThemeFontFamily}"
                        Glyph="{x:Bind Thread.QuickReplyEmoji, Mode=OneWay}" />
                </Button>
            </Grid>
        </Grid>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="AdaptiveLayoutStateGroup">
                <VisualState x:Name="Full">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource IntermediateWindowWidth}" />
                    </VisualState.StateTriggers>
                </VisualState>

                <VisualState x:Name="Compact">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource CompactWindowWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="ContentGrid.CornerRadius" Value="0" />
                        <Setter x:Name="BorderThicknessSetter" Target="ContentGrid.BorderThickness" Value="0,1,0,0" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="CompactOverlayStates">
                <VisualState x:Name="EnterCompactOverlay" />
                <VisualState x:Name="ExitCompactOverlay">
                    <VisualState.Setters>
                        <Setter Target="CompactOverlayButton.(ToolTipService.ToolTip)" Value="Exit Picture-in-Picture mode" />
                        <Setter Target="CompactOverlayButton.Label" Value="Exit Picture-in-Picture mode" />
                        <Setter Target="CompactOverlayButton.Icon">
                            <Setter.Value>
                                <FontIcon
                                    VerticalAlignment="Center"
                                    FontFamily="{StaticResource SymbolThemeFontFamily}"
                                    Glyph="&#xEE47;" />
                            </Setter.Value>
                        </Setter>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</UserControl>
